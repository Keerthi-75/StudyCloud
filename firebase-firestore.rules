rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }
    
    function isGroupAdmin(groupId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.admins;
    }
    
    function isDocumentCollaborator(documentId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/documents/$(documentId)) &&
             request.auth.uid in get(/databases/$(database)/documents/documents/$(documentId)).data.collaborators;
    }
    
    function hasValidDocumentData() {
      return request.resource.data.keys().hasAll(['title', 'type', 'groupId', 'createdBy', 'collaborators']) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.type in ['document', 'spreadsheet', 'presentation'] &&
             request.resource.data.groupId is string &&
             request.resource.data.createdBy == request.auth.uid &&
             request.resource.data.collaborators is list;
    }
    
    function hasValidGroupData() {
      return request.resource.data.keys().hasAll(['name', 'description', 'isPrivate', 'createdBy', 'members', 'admins']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.description is string &&
             request.resource.data.isPrivate is bool &&
             request.resource.data.createdBy == request.auth.uid &&
             request.resource.data.members is list &&
             request.resource.data.admins is list &&
             request.auth.uid in request.resource.data.members &&
             request.auth.uid in request.resource.data.admins;
    }

    function hasValidMessageData() {
      return request.resource.data.keys().hasAll(['content', 'groupId', 'userId', 'type']) &&
             request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.groupId is string &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.type in ['text', 'file', 'meeting', 'system'];
    }

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Groups collection
    match /groups/{groupId} {
      // Anyone can read public groups, members can read private groups
      allow read: if isAuthenticated() && 
                     (resource.data.isPrivate == false || isGroupMember(groupId));
      
      // Only authenticated users can create groups with valid data
      allow create: if isAuthenticated() && hasValidGroupData();
      
      // Only group admins can update groups
      allow update: if isAuthenticated() && isGroupAdmin(groupId) &&
                       // Ensure admins list always contains at least one admin
                       request.resource.data.admins.size() > 0 &&
                       // Prevent removing yourself as admin if you're the only admin
                       (resource.data.admins.size() > 1 || request.auth.uid in request.resource.data.admins);
      
      // Only group admins can delete groups
      allow delete: if isAuthenticated() && isGroupAdmin(groupId);
    }

    // Documents collection - for collaborative documents
    match /documents/{documentId} {
      // Collaborators can read documents
      allow read: if isAuthenticated() && isDocumentCollaborator(documentId);
      
      // Authenticated users can create documents with valid data
      allow create: if isAuthenticated() && hasValidDocumentData() &&
                       // Creator must be in collaborators list
                       request.auth.uid in request.resource.data.collaborators &&
                       // Must be member of the group
                       isGroupMember(request.resource.data.groupId);
      
      // Collaborators can update documents
      allow update: if isAuthenticated() && isDocumentCollaborator(documentId) &&
                       // Cannot change core metadata
                       request.resource.data.id == resource.data.id &&
                       request.resource.data.createdBy == resource.data.createdBy &&
                       request.resource.data.groupId == resource.data.groupId;
      
      // Document creator or group admin can delete documents
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.createdBy) || isGroupAdmin(resource.data.groupId));
    }

    // Messages collection - for group chat
    match /messages/{messageId} {
      // Group members can read messages
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      
      // Authenticated users can create messages in groups they're members of
      allow create: if isAuthenticated() && 
                       hasValidMessageData() &&
                       isGroupMember(request.resource.data.groupId);
      
      // Message authors can update their own messages (for editing)
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Cannot change core metadata
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.groupId == resource.data.groupId &&
                       request.resource.data.timestamp == resource.data.timestamp;
      
      // Message authors or group admins can delete messages
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.userId) || isGroupAdmin(resource.data.groupId));
    }

    // Meetings collection - for video meetings
    match /meetings/{meetingId} {
      // Group members can read meetings
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      
      // Group members can create meetings
      allow create: if isAuthenticated() && 
                       request.resource.data.scheduledBy == request.auth.uid &&
                       isGroupMember(request.resource.data.groupId) &&
                       request.resource.data.keys().hasAll(['title', 'groupId', 'scheduledBy', 'startTime']) &&
                       request.resource.data.title is string &&
                       request.resource.data.title.size() > 0;
      
      // Meeting creator or group admins can update meetings
      allow update: if isAuthenticated() && 
                       (isOwner(resource.data.scheduledBy) || isGroupAdmin(resource.data.groupId));
      
      // Meeting creator or group admins can delete meetings
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.scheduledBy) || isGroupAdmin(resource.data.groupId));
    }

    // Tasks collection - for group task management
    match /tasks/{taskId} {
      // Group members can read tasks
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      
      // Group members can create tasks
      allow create: if isAuthenticated() && 
                       request.resource.data.createdBy == request.auth.uid &&
                       isGroupMember(request.resource.data.groupId) &&
                       request.resource.data.keys().hasAll(['title', 'groupId', 'createdBy', 'status']) &&
                       request.resource.data.title is string &&
                       request.resource.data.title.size() > 0 &&
                       request.resource.data.status in ['todo', 'in-progress', 'completed'];
      
      // Task assignees, creator, or group admins can update tasks
      allow update: if isAuthenticated() && 
                       (request.auth.uid in resource.data.assignedTo || 
                        isOwner(resource.data.createdBy) || 
                        isGroupAdmin(resource.data.groupId));
      
      // Task creator or group admins can delete tasks
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.createdBy) || isGroupAdmin(resource.data.groupId));
    }

    // User preferences and settings
    match /userSettings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Group invitations
    match /invitations/{invitationId} {
      // Invited users can read their invitations
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.invitedUserId || 
                      isGroupAdmin(resource.data.groupId));
      
      // Group admins can create invitations
      allow create: if isAuthenticated() && 
                       isGroupAdmin(request.resource.data.groupId) &&
                       request.resource.data.keys().hasAll(['groupId', 'invitedUserId', 'invitedBy']) &&
                       request.resource.data.invitedBy == request.auth.uid;
      
      // Invited users can update invitations (to accept/decline)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.invitedUserId &&
                       // Can only update status
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'respondedAt']);
      
      // Group admins or invited users can delete invitations
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == resource.data.invitedUserId || 
                        isGroupAdmin(resource.data.groupId));
    }

    // Analytics and usage tracking (read-only for users)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side writes
    }

    // System notifications
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // System can create notifications (server-side)
      allow create: if false; // Only server-side writes
      
      // Users can update their notifications (mark as read)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Users can delete their notifications
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}